#ifndef COMMAND_H_INCLUDED
#define COMMAND_H_INCLUDED

#include <vector>

class Context;
class StatefullScreen;
class Point;
class Entity;


enum CMDResult
{
    RES_OK = 0,
    RES_ERROR = 1,
    RES_CANCEL = 2
};

class Command
{
    public:
        Command(Context *context);
        Command() = delete;
        virtual ~Command();

        virtual void Execute(void) = 0;

        virtual void Terminate(void);

        virtual Command* Clone(void) = 0;

        Context* GetContext(void)
        {
            return m_context;
        }

        bool IsFinidhed(void)
        {
            return m_is_finished;
        }

    protected:
        volatile bool m_is_finished;
        CMDResult EnterPoint(Point *point);
        CMDResult EnterEntity(Entity *entity);
        CMDResult EnterEntities(std::vector<Entity*> *entity_set);
        //CMDResult PrintMessage(const std::string msg);

        void SetPoint(const Point &point);
        void SetEntity(Entity *entity);
        void SetEntities(const std::vector<Entity*> &vec);

    private:
        volatile bool m_is_executing;
        volatile bool m_is_canceled;

        Context *m_context;
        StatefullScreen *m_screen;

};

#endif // COMMAND_H_INCLUDED
